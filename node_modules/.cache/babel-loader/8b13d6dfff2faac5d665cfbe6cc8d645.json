{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anshj\\\\JsStuff\\\\Authentication\\\\src\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\n// function for clearing token in localStorage\nconst calculateRemainingTime = expirationTime => {\n  // const currentTime = new Date().getTime();\n  // const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingTime = expirationTime - Date.now();\n  return remainingTime;\n};\n\n// Function to check stored token validity\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem('token');\n  const storedExpirationDate = localStorage.getItem('expirationTime');\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n  if (remainingTime <= 60000) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    return null;\n  }\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\nexport const AuthContextProvider = props => {\n  _s();\n  const tokenData = useMemo(() => retrieveStoredToken(), []);\n  let initialToken;\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationTime', expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    // clear token as soon as time expires\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n  useEffect(() => {\n    if (tokenData) {\n      logoutTimer = setTimeout(logoutHandler, remainingTime);\n    }\n  }, [tokenData]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n};\n_s(AuthContextProvider, \"flaLK4VZtF3XhP1IxYpUC00fON8=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","logoutTimer","AuthContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","remainingTime","Date","now","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","removeItem","duration","AuthContextProvider","props","tokenData","useMemo","initialToken","setToken","userIsLoggedIn","logoutHandler","clearTimeout","loginHandler","setItem","setTimeout","contextValue","children"],"sources":["C:/Users/anshj/JsStuff/Authentication/src/store/auth-context.js"],"sourcesContent":["import { createContext , useEffect, useState } from \"react\";\r\n\r\n\r\nlet logoutTimer;\r\n\r\nconst AuthContext = createContext({\r\n    token: '',\r\n    isLoggedIn: false,\r\n    login: (token) => {},\r\n    logout: () => {}\r\n});\r\n\r\n// function for clearing token in localStorage\r\nconst calculateRemainingTime = (expirationTime) => {\r\n    // const currentTime = new Date().getTime();\r\n    // const adjExpirationTime = new Date(expirationTime).getTime();\r\n    const remainingTime = expirationTime - Date.now()\r\n\r\n    return remainingTime;\r\n}\r\n\r\n// Function to check stored token validity\r\nconst retrieveStoredToken = () => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedExpirationDate = localStorage.getItem('expirationTime');\r\n\r\n    const remainingTime = calculateRemainingTime(storedExpirationDate);\r\n\r\n    if(remainingTime <= 60000) {\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('expirationTime')\r\n        return null;\r\n    }\r\n\r\n    return {\r\n        token: storedToken,\r\n        duration: remainingTime\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const AuthContextProvider = (props) => {\r\n    const tokenData = useMemo(() => retrieveStoredToken(),[])\r\n    let initialToken;\r\n    if(tokenData) {\r\n        initialToken = tokenData.token;\r\n    }\r\n    \r\n    const [token, setToken] = useState(initialToken)\r\n\r\n    const userIsLoggedIn = !!token\r\n\r\n    \r\n    const logoutHandler = () => {\r\n        setToken(null);\r\n        localStorage.removeItem('token');\r\n\r\n        if (logoutTimer) {\r\n            clearTimeout(logoutTimer);\r\n        }\r\n    }\r\n    \r\n    const loginHandler = (token, expirationTime) => {\r\n        setToken(token);\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('expirationTime', expirationTime);\r\n\r\n        const remainingTime = calculateRemainingTime(expirationTime);\r\n\r\n        // clear token as soon as time expires\r\n        logoutTimer = setTimeout(logoutHandler, remainingTime);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(tokenData) {\r\n            logoutTimer = setTimeout(logoutHandler, remainingTime);\r\n        }\r\n    },[tokenData])\r\n\r\n    const contextValue = {\r\n        token: token,\r\n        isLoggedIn: userIsLoggedIn,\r\n        login: loginHandler,\r\n        logout: logoutHandler,\r\n    }\r\n\r\n\r\n    return <AuthContext.Provider value={contextValue}>{props.children}</AuthContext.Provider>\r\n}\r\n\r\nexport default AuthContext;"],"mappings":";;AAAA,SAASA,aAAa,EAAGC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAG5D,IAAIC,WAAW;AAEf,MAAMC,WAAW,gBAAGJ,aAAa,CAAC;EAC9BK,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAGF,KAAK,IAAK,CAAC,CAAC;EACpBG,MAAM,EAAE,MAAM,CAAC;AACnB,CAAC,CAAC;;AAEF;AACA,MAAMC,sBAAsB,GAAIC,cAAc,IAAK;EAC/C;EACA;EACA,MAAMC,aAAa,GAAGD,cAAc,GAAGE,IAAI,CAACC,GAAG,EAAE;EAEjD,OAAOF,aAAa;AACxB,CAAC;;AAED;AACA,MAAMG,mBAAmB,GAAG,MAAM;EAC9B,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACjD,MAAMC,oBAAoB,GAAGF,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;EAEnE,MAAMN,aAAa,GAAGF,sBAAsB,CAACS,oBAAoB,CAAC;EAElE,IAAGP,aAAa,IAAI,KAAK,EAAE;IACvBK,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;IAChCH,YAAY,CAACG,UAAU,CAAC,gBAAgB,CAAC;IACzC,OAAO,IAAI;EACf;EAEA,OAAO;IACHd,KAAK,EAAEU,WAAW;IAClBK,QAAQ,EAAET;EACd,CAAC;AACL,CAAC;AAID,OAAO,MAAMU,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EAC1C,MAAMC,SAAS,GAAGC,OAAO,CAAC,MAAMV,mBAAmB,EAAE,EAAC,EAAE,CAAC;EACzD,IAAIW,YAAY;EAChB,IAAGF,SAAS,EAAE;IACVE,YAAY,GAAGF,SAAS,CAAClB,KAAK;EAClC;EAEA,MAAM,CAACA,KAAK,EAAEqB,QAAQ,CAAC,GAAGxB,QAAQ,CAACuB,YAAY,CAAC;EAEhD,MAAME,cAAc,GAAG,CAAC,CAACtB,KAAK;EAG9B,MAAMuB,aAAa,GAAG,MAAM;IACxBF,QAAQ,CAAC,IAAI,CAAC;IACdV,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;IAEhC,IAAIhB,WAAW,EAAE;MACb0B,YAAY,CAAC1B,WAAW,CAAC;IAC7B;EACJ,CAAC;EAED,MAAM2B,YAAY,GAAG,CAACzB,KAAK,EAAEK,cAAc,KAAK;IAC5CgB,QAAQ,CAACrB,KAAK,CAAC;IACfW,YAAY,CAACe,OAAO,CAAC,OAAO,EAAE1B,KAAK,CAAC;IACpCW,YAAY,CAACe,OAAO,CAAC,gBAAgB,EAAErB,cAAc,CAAC;IAEtD,MAAMC,aAAa,GAAGF,sBAAsB,CAACC,cAAc,CAAC;;IAE5D;IACAP,WAAW,GAAG6B,UAAU,CAACJ,aAAa,EAAEjB,aAAa,CAAC;EAE1D,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZ,IAAGsB,SAAS,EAAE;MACVpB,WAAW,GAAG6B,UAAU,CAACJ,aAAa,EAAEjB,aAAa,CAAC;IAC1D;EACJ,CAAC,EAAC,CAACY,SAAS,CAAC,CAAC;EAEd,MAAMU,YAAY,GAAG;IACjB5B,KAAK,EAAEA,KAAK;IACZC,UAAU,EAAEqB,cAAc;IAC1BpB,KAAK,EAAEuB,YAAY;IACnBtB,MAAM,EAAEoB;EACZ,CAAC;EAGD,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEK,YAAa;IAAA,UAAEX,KAAK,CAACY;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAC7F,CAAC;AAAA,GAhDYb,mBAAmB;AAAA,KAAnBA,mBAAmB;AAkDhC,eAAejB,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}